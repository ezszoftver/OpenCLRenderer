bool RayShader(Hits *hits, Rays *rays, Vector3 camPos, Vector3 camAt, __global Material *materials, __global unsigned char *textureDatas, __global unsigned char *out, int in_Width, int in_Height, int pixelx, int pixely)
{
    float3 light1;
    light1.x = +1000.0f;
    light1.y = +1000.0f;
    light1.z = +1000.0f;

    float3 light2;
    light2.x = -1000.0f;
    light2.y = +1000.0f;
    light2.z = +1000.0f;

    float3 light3;
    light3.x = 0.0f;
    light3.y = +1000.0f;
    light3.z = +1000.0f;
    
    float3 cam_pos;
    cam_pos.x = camPos.x;
    cam_pos.y = camPos.y;
    cam_pos.z = camPos.z;

    if (hits->id == 0)
    {
        Hit hit = hits->hit[hits->id][0];
        if (hit.isCollision == 0) { return true; }

        Ray newRay1; // light1
        newRay1.posx = light1.x;
        newRay1.posy = light1.y;
        newRay1.posz = light1.z;
        float3 dir1 = normalize(hit.pos - light1);
        newRay1.dirx = dir1.x;
        newRay1.diry = dir1.y;
        newRay1.dirz = dir1.z;
        newRay1.length = 5000.0f;

        Ray newRay2; // light 2
        newRay2.posx = light2.x;
        newRay2.posy = light2.y;
        newRay2.posz = light2.z;
        float3 dir2 = normalize(hit.pos - light2);
        newRay2.dirx = dir2.x;
        newRay2.diry = dir2.y;
        newRay2.dirz = dir2.z;
        newRay2.length = 5000.0f;

        Ray newRay3; // light3
        newRay3.posx = light3.x;
        newRay3.posy = light3.y;
        newRay3.posz = light3.z;
        float3 dir3 = normalize(hit.pos - light3);
        newRay3.dirx = dir3.x;
        newRay3.diry = dir3.y;
        newRay3.dirz = dir3.z;
        newRay3.length = 5000.0f;

        Ray newRay4; // reflection
        float3 pos = hit.pos + hit.normal * 0.01f;
        newRay4.posx = pos.x;
        newRay4.posy = pos.y;
        newRay4.posz = pos.z;
        float3 dir4 = reflect(normalize(hit.pos - cam_pos), hit.normal);
        newRay4.dirx = dir4.x;
        newRay4.diry = dir4.y;
        newRay4.dirz = dir4.z;
        newRay4.length = 5000.0f;

        rays->id = 1;
        rays->count[rays->id] = 4;
        rays->ray[rays->id][0] = newRay1;
        rays->ray[rays->id][1] = newRay2;
        rays->ray[rays->id][2] = newRay3;
        rays->ray[rays->id][3] = newRay4;

        return false;
    }
    
    if (hits->id == 1)
    {
        Hit hit1 = hits->hit[0][0];
        if (hit1.isCollision == 0) { return true; }

        float diffuseIntensity = 0.0f;

        Hit hit2 = hits->hit[hits->id][0];
        if (hit2.isCollision == 1)
        {
            float length2 = length(light1 - hit2.pos);
            float length1 = length(light1 - hit1.pos);
            
            if ((length2 + 0.005f) > length1)
            {
                float3 dir = normalize(hit1.pos - light1);
                diffuseIntensity += max(dot(-dir, hit2.normal), 0.0f);// + max(dot(-dir2, hit.normal), 0.0f);
            }
        }

        Hit hit3 = hits->hit[hits->id][1];
        if (hit3.isCollision == 1)
        {
            {
                float length2 = length(light2 - hit3.pos);
                float length1 = length(light2 - hit1.pos);
        
                if ((length2 + 0.005f) > length1)
                {
                    float3 dir = normalize(hit1.pos - light2);
                    diffuseIntensity += max(dot(-dir, hit3.normal), 0.0f);
                }
            }
        }

        Hit hit4 = hits->hit[hits->id][2];
        if (hit4.isCollision == 1)
        {
            {
                float length2 = length(light3 - hit4.pos);
                float length1 = length(light3 - hit1.pos);
        
                if ((length2 + 0.005f) > length1)
                {
                    float3 dir = normalize(hit1.pos - light3);
                    diffuseIntensity += max(dot(-dir, hit4.normal), 0.0f);
                }
            }
        }

        

        Color textureColor = Tex2DDiffuse(materials, textureDatas, hit1.materialId, hit1.st);

        // diffuse
        Color diffuseColor;
        diffuseColor.red   = (int)(((float)textureColor.red  ) * diffuseIntensity);
        diffuseColor.green = (int)(((float)textureColor.green) * diffuseIntensity);
        diffuseColor.blue  = (int)(((float)textureColor.blue ) * diffuseIntensity);
        diffuseColor.alpha = 255;

        // reflection
        Hit hit0 = hits->hit[0][0];
        Hit hit5 = hits->hit[hits->id][3];
        if (hit5.isCollision == 1 && hit0.objectId == 0)
        {
            Color reflectionColor = Tex2DDiffuse(materials, textureDatas, hit5.materialId, hit5.st);

            float reflectionIntensity = diffuseIntensity * 0.25;
            diffuseColor.red   += (int)(((float)reflectionColor.red  ) * reflectionIntensity);
            diffuseColor.green += (int)(((float)reflectionColor.green) * reflectionIntensity);
            diffuseColor.blue  += (int)(((float)reflectionColor.blue ) * reflectionIntensity);
            diffuseColor.alpha = 255;
        }

        WriteTexture(out, in_Width, in_Height, ToFloat2(pixelx, pixely), diffuseColor);

        return true;
    }

    return true;
}